{"ast":null,"code":"// Returns a new state to avoid breaking react rules.\nexport default function llenarArray(juego) {\n  const newState = { ...juego\n  };\n  const square = document.querySelectorAll('.square');\n  const newArray = [];\n\n  for (let i = 0; i < square.length; i++) {\n    const content = square[i].textContent;\n\n    if (content) {\n      newArray.push(content);\n    } else {\n      newArray.push('');\n    }\n  }\n\n  newState.estadoActual = newArray;\n  return newState;\n}","map":{"version":3,"names":["llenarArray","juego","newState","square","document","querySelectorAll","newArray","i","length","content","textContent","push","estadoActual"],"sources":["C:/Users/Usuario/OneDrive/Documentos/GitHub/Proyecto-IW/src/utils/llenarArray.ts"],"sourcesContent":["import { Juego } from '../types/types';\r\n\r\n// Returns a new state to avoid breaking react rules.\r\nexport default function llenarArray(juego: Juego) {\r\n  const newState = { ...juego };\r\n\r\n  const square = document.querySelectorAll('.square');\r\n  const newArray: string[] = [];\r\n\r\n  for (let i = 0; i < square.length; i++) {\r\n    const content = square[i].textContent;\r\n\r\n    if (content) {\r\n      newArray.push(content);\r\n    } else {\r\n      newArray.push('');\r\n    }\r\n  }\r\n\r\n  newState.estadoActual = newArray;\r\n\r\n  return newState;\r\n}\r\n"],"mappings":"AAEA;AACA,eAAe,SAASA,WAAT,CAAqBC,KAArB,EAAmC;EAChD,MAAMC,QAAQ,GAAG,EAAE,GAAGD;EAAL,CAAjB;EAEA,MAAME,MAAM,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAf;EACA,MAAMC,QAAkB,GAAG,EAA3B;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;IACtC,MAAME,OAAO,GAAGN,MAAM,CAACI,CAAD,CAAN,CAAUG,WAA1B;;IAEA,IAAID,OAAJ,EAAa;MACXH,QAAQ,CAACK,IAAT,CAAcF,OAAd;IACD,CAFD,MAEO;MACLH,QAAQ,CAACK,IAAT,CAAc,EAAd;IACD;EACF;;EAEDT,QAAQ,CAACU,YAAT,GAAwBN,QAAxB;EAEA,OAAOJ,QAAP;AACD"},"metadata":{},"sourceType":"module"}