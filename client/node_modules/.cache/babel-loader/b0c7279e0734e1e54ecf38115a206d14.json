{"ast":null,"code":"import { toast, Zoom } from 'react-toastify';\nimport { desencriptarPalabra } from '../libs/crypto';\nimport diccionario from '../json/final_dictionary.json';\nlet juegoActual; // TODO: Mejorar que no exista variable global juegoActual.\n\nfunction movePosition() {\n  let stepForward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  if (stepForward) {\n    const nextPosition = juegoActual.position + 1;\n\n    if (nextPosition <= juegoActual.row * 5) {\n      juegoActual.position = nextPosition;\n    }\n  } else {\n    const previousPosition = juegoActual.position - 1;\n\n    if (previousPosition >= juegoActual.row * 5 - 4) {\n      juegoActual.position = previousPosition;\n    }\n  }\n}\n\nfunction indexOfChars(str, char) {\n  const indexes = [];\n  const split = str.split('');\n\n  for (let i = 0; i < split.length; i++) {\n    if (char === str[i]) {\n      indexes.push(i);\n    }\n  }\n\n  return indexes;\n}\n\nfunction checkWord() {\n  let word = '';\n  const square = document.querySelectorAll('.square');\n\n  for (let i = juegoActual.row * 5 - 5; i < juegoActual.row * 5; i++) {\n    word += square[i].textContent;\n  }\n\n  if (word.length !== 5) {\n    toast.info('No hay suficientes letras', {\n      position: 'top-center',\n      className: 'toast',\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      transition: Zoom\n    });\n    return false;\n  }\n\n  const cantidadRepetidos = {};\n  const palabra = desencriptarPalabra(juegoActual.dailyWord);\n\n  for (let i = 0; i < palabra.length; i++) {\n    cantidadRepetidos[palabra[i]] = 0;\n  }\n\n  for (let i = 0; i < palabra.length; i++) {\n    cantidadRepetidos[palabra[i]] += 1;\n  }\n\n  word = word.toLowerCase();\n\n  if (!diccionario.includes(word)) {\n    toast.info('La palabra no estÃ¡ en el diccionario', {\n      position: 'top-center',\n      className: 'toast',\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      transition: Zoom\n    });\n    return false;\n  }\n\n  if (juegoActual.dificil) {\n    for (let i = 0; i < juegoActual.hardModeMustContain.length; i++) {\n      const {\n        letter,\n        position\n      } = juegoActual.hardModeMustContain[i];\n\n      if (!word.includes(letter) && position === 0) {\n        toast.info(`El intento debe contener ${letter.toUpperCase()}`, {\n          position: 'top-center',\n          className: 'toast',\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          transition: Zoom\n        });\n        return false;\n      }\n\n      const indexes = indexOfChars(word, letter);\n\n      if (!indexes.includes(position - 1) && position !== 0) {\n        toast.info(`El intento debe contener ${letter.toUpperCase()} en la ${position} posicion`, {\n          position: 'top-center',\n          className: 'toast',\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          transition: Zoom\n        });\n        return false;\n      }\n    }\n\n    juegoActual.hardModeMustContain = [];\n  }\n\n  let delay = 0;\n\n  for (let i = 0; i < 5; i++) {\n    square[i + 5 * (juegoActual.row - 1)].style.animationDelay = `${delay}s`;\n    square[i + 5 * (juegoActual.row - 1)].style.transitionDelay = `${delay}s`;\n    delay += 0.4;\n    square[i + 5 * (juegoActual.row - 1)].classList.add('scale-up-center');\n\n    if (word[i] === desencriptarPalabra(juegoActual.dailyWord)[i]) {\n      square[i + 5 * (juegoActual.row - 1)].classList.add('correcto');\n      const squareLetter = document.getElementById(word[i].toUpperCase());\n      juegoActual.hardModeMustContain.push({\n        letter: word[i],\n        position: i + 1\n      });\n\n      if (!squareLetter) {\n        throw new Error(\"Can't get actual square\");\n      }\n\n      squareLetter.classList.add('correcto');\n      cantidadRepetidos[word[i]] -= 1;\n    }\n  }\n\n  for (let i = 0; i < 5; i++) {\n    const squareLetter = document.getElementById(word[i].toUpperCase());\n\n    if (!squareLetter) {\n      throw new Error(\"Can't get actual square\");\n    }\n\n    if (desencriptarPalabra(juegoActual.dailyWord).includes(word[i]) && cantidadRepetidos[word[i]] > 0) {\n      square[i + 5 * (juegoActual.row - 1)].classList.add('presente');\n      juegoActual.hardModeMustContain.push({\n        letter: word[i],\n        position: 0\n      });\n      squareLetter.classList.add('presente');\n      cantidadRepetidos[word[i]] -= 1;\n    } else {\n      square[i + 5 * (juegoActual.row - 1)].classList.add('incorrecto');\n      squareLetter.classList.add('incorrecto');\n    }\n  }\n\n  if (word === desencriptarPalabra(juegoActual.dailyWord)) {\n    toast.success('Felicitaciones, acertaste!!', {\n      position: 'top-center',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n    const nuevasJugadas = juegoActual.jugadas + 1;\n    const nuevasVictorias = juegoActual.victorias + 1;\n    const nuevaRacha = juegoActual.streak + 1;\n    let nuevaMayorRacha = juegoActual.maxStreak;\n\n    if (nuevaRacha > nuevaMayorRacha) {\n      nuevaMayorRacha = nuevaRacha;\n    }\n\n    const nuevaDistribucion = { ...juegoActual.distribucion\n    };\n    nuevaDistribucion[juegoActual.row] += 1;\n    juegoActual = { ...juegoActual,\n      juegoFinalizado: true,\n      jugadas: nuevasJugadas,\n      victorias: nuevasVictorias,\n      distribucion: nuevaDistribucion,\n      streak: nuevaRacha,\n      maxStreak: nuevaMayorRacha\n    };\n  }\n\n  return true;\n}\n\nfunction moveRow() {\n  if (juegoActual.position % 5 !== 0) {\n    return;\n  }\n\n  const nextRow = juegoActual.row + 1;\n  const nextPosition = juegoActual.position + 1;\n  juegoActual = { ...juegoActual,\n    row: nextRow,\n    position: nextPosition\n  };\n}\n\nfunction fallaste() {\n  if (juegoActual.juegoFinalizado) {\n    return;\n  }\n\n  if (juegoActual.position === 31 && juegoActual.row === 7) {\n    toast.error(`Fallaste, la palabra era ${desencriptarPalabra(juegoActual.dailyWord)}`, {\n      position: 'top-center',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n    const nuevasJugadas = juegoActual.jugadas + 1;\n    const nuevaDistribucion = { ...juegoActual.distribucion\n    };\n    nuevaDistribucion.X += 1;\n    juegoActual = { ...juegoActual,\n      juegoFinalizado: true,\n      jugadas: nuevasJugadas,\n      distribucion: nuevaDistribucion,\n      streak: 0\n    };\n  }\n} // Returns a new state to avoid breaking react rules.\n\n\nfunction keyPress(e, juego) {\n  juegoActual = juego;\n\n  if (juegoActual.juegoFinalizado) {\n    return juegoActual;\n  }\n\n  let square = document.getElementsByClassName('square')[juegoActual.position - 1];\n\n  if (e === 'Backspace') {\n    if (square.textContent === '') {\n      movePosition(false);\n    }\n\n    square = document.getElementsByClassName('square')[juegoActual.position - 1];\n    square.textContent = '';\n  } else if (e === 'Enter') {\n    const existe = checkWord();\n\n    if (existe) {\n      moveRow();\n    }\n  } else if (e.length === 1 && square.textContent === '' && /[a-zA-Z\\u00f1\\u00d1]/.test(e)) {\n    const span = document.createElement('span');\n    span.textContent = e;\n    square.appendChild(span);\n    movePosition();\n  }\n\n  fallaste();\n  return juegoActual;\n}\n\nexport default keyPress;","map":{"version":3,"names":["toast","Zoom","desencriptarPalabra","diccionario","juegoActual","movePosition","stepForward","nextPosition","position","row","previousPosition","indexOfChars","str","char","indexes","split","i","length","push","checkWord","word","square","document","querySelectorAll","textContent","info","className","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","transition","cantidadRepetidos","palabra","dailyWord","toLowerCase","includes","dificil","hardModeMustContain","letter","toUpperCase","delay","style","animationDelay","transitionDelay","classList","add","squareLetter","getElementById","Error","success","nuevasJugadas","jugadas","nuevasVictorias","victorias","nuevaRacha","streak","nuevaMayorRacha","maxStreak","nuevaDistribucion","distribucion","juegoFinalizado","moveRow","nextRow","fallaste","error","X","keyPress","e","juego","getElementsByClassName","existe","test","span","createElement","appendChild"],"sources":["C:/Users/Usuario/OneDrive/Documentos/GitHub/Proyecto-IW/src/utils/keypress.ts"],"sourcesContent":["import { toast, Zoom } from 'react-toastify';\r\nimport { desencriptarPalabra } from '../libs/crypto';\r\nimport { Juego } from '../types/types';\r\nimport diccionario from '../json/final_dictionary.json';\r\n\r\nlet juegoActual: Juego;\r\n\r\n// TODO: Mejorar que no exista variable global juegoActual.\r\nfunction movePosition(stepForward = true) {\r\n  if (stepForward) {\r\n    const nextPosition = juegoActual.position + 1;\r\n\r\n    if (nextPosition <= juegoActual.row * 5) {\r\n      juegoActual.position = nextPosition;\r\n    }\r\n  } else {\r\n    const previousPosition = juegoActual.position - 1;\r\n\r\n    if (previousPosition >= juegoActual.row * 5 - 4) {\r\n      juegoActual.position = previousPosition;\r\n    }\r\n  }\r\n}\r\n\r\nfunction indexOfChars(str: string, char: string): number[] {\r\n  const indexes: number[] = [];\r\n  const split = str.split('');\r\n\r\n  for (let i = 0; i < split.length; i++) {\r\n    if (char === str[i]) {\r\n      indexes.push(i);\r\n    }\r\n  }\r\n\r\n  return indexes;\r\n}\r\n\r\nfunction checkWord() {\r\n  let word = '';\r\n\r\n  const square = document.querySelectorAll<HTMLElement>('.square');\r\n\r\n  for (let i = juegoActual.row * 5 - 5; i < juegoActual.row * 5; i++) {\r\n    word += square[i].textContent;\r\n  }\r\n\r\n  if (word.length !== 5) {\r\n    toast.info('No hay suficientes letras', {\r\n      position: 'top-center',\r\n      className: 'toast',\r\n      autoClose: 2000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      transition: Zoom,\r\n    });\r\n\r\n    return false;\r\n  }\r\n\r\n  const cantidadRepetidos: Record<string, number> = {};\r\n\r\n  const palabra = desencriptarPalabra(juegoActual.dailyWord);\r\n\r\n  for (let i = 0; i < palabra.length; i++) {\r\n    cantidadRepetidos[palabra[i]] = 0;\r\n  }\r\n  for (let i = 0; i < palabra.length; i++) {\r\n    cantidadRepetidos[palabra[i]] += 1;\r\n  }\r\n\r\n  word = word.toLowerCase();\r\n\r\n  if (!diccionario.includes(word)) {\r\n    toast.info('La palabra no estÃ¡ en el diccionario', {\r\n      position: 'top-center',\r\n      className: 'toast',\r\n      autoClose: 2000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      transition: Zoom,\r\n    });\r\n\r\n    return false;\r\n  }\r\n\r\n  if (juegoActual.dificil) {\r\n    for (let i = 0; i < juegoActual.hardModeMustContain.length; i++) {\r\n      const { letter, position } = juegoActual.hardModeMustContain[i];\r\n\r\n      if (!word.includes(letter) && position === 0) {\r\n        toast.info(`El intento debe contener ${letter.toUpperCase()}`, {\r\n          position: 'top-center',\r\n          className: 'toast',\r\n          autoClose: 2000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          transition: Zoom,\r\n        });\r\n\r\n        return false;\r\n      }\r\n      const indexes = indexOfChars(word, letter);\r\n\r\n      if (!indexes.includes(position - 1) && position !== 0) {\r\n        toast.info(`El intento debe contener ${letter.toUpperCase()} en la ${position} posicion`, {\r\n          position: 'top-center',\r\n          className: 'toast',\r\n          autoClose: 2000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          transition: Zoom,\r\n        });\r\n\r\n        return false;\r\n      }\r\n    }\r\n    juegoActual.hardModeMustContain = [];\r\n  }\r\n\r\n  let delay = 0;\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    square[i + 5 * (juegoActual.row - 1)].style.animationDelay = `${delay}s`;\r\n    square[i + 5 * (juegoActual.row - 1)].style.transitionDelay = `${delay}s`;\r\n    delay += 0.4;\r\n    square[i + 5 * (juegoActual.row - 1)].classList.add('scale-up-center');\r\n\r\n    if (word[i] === desencriptarPalabra(juegoActual.dailyWord)[i]) {\r\n      square[i + 5 * (juegoActual.row - 1)].classList.add('correcto');\r\n      const squareLetter = document.getElementById(word[i].toUpperCase());\r\n\r\n      juegoActual.hardModeMustContain.push({ letter: word[i], position: i + 1 });\r\n      if (!squareLetter) {\r\n        throw new Error(\"Can't get actual square\");\r\n      }\r\n      squareLetter.classList.add('correcto');\r\n      cantidadRepetidos[word[i]] -= 1;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    const squareLetter = document.getElementById(word[i].toUpperCase());\r\n\r\n    if (!squareLetter) {\r\n      throw new Error(\"Can't get actual square\");\r\n    }\r\n\r\n    if (\r\n      desencriptarPalabra(juegoActual.dailyWord).includes(word[i]) &&\r\n      cantidadRepetidos[word[i]] > 0\r\n    ) {\r\n      square[i + 5 * (juegoActual.row - 1)].classList.add('presente');\r\n      juegoActual.hardModeMustContain.push({ letter: word[i], position: 0 });\r\n      squareLetter.classList.add('presente');\r\n      cantidadRepetidos[word[i]] -= 1;\r\n    } else {\r\n      square[i + 5 * (juegoActual.row - 1)].classList.add('incorrecto');\r\n      squareLetter.classList.add('incorrecto');\r\n    }\r\n  }\r\n\r\n  if (word === desencriptarPalabra(juegoActual.dailyWord)) {\r\n    toast.success('Felicitaciones, acertaste!!', {\r\n      position: 'top-center',\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n    const nuevasJugadas = juegoActual.jugadas + 1;\r\n    const nuevasVictorias = juegoActual.victorias + 1;\r\n    const nuevaRacha = juegoActual.streak + 1;\r\n\r\n    let nuevaMayorRacha = juegoActual.maxStreak;\r\n\r\n    if (nuevaRacha > nuevaMayorRacha) {\r\n      nuevaMayorRacha = nuevaRacha;\r\n    }\r\n\r\n    const nuevaDistribucion = { ...juegoActual.distribucion };\r\n\r\n    nuevaDistribucion[juegoActual.row] += 1;\r\n    juegoActual = {\r\n      ...juegoActual,\r\n      juegoFinalizado: true,\r\n      jugadas: nuevasJugadas,\r\n      victorias: nuevasVictorias,\r\n      distribucion: nuevaDistribucion,\r\n      streak: nuevaRacha,\r\n      maxStreak: nuevaMayorRacha,\r\n    };\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction moveRow() {\r\n  if (juegoActual.position % 5 !== 0) {\r\n    return;\r\n  }\r\n\r\n  const nextRow = juegoActual.row + 1;\r\n  const nextPosition = juegoActual.position + 1;\r\n\r\n  juegoActual = {\r\n    ...juegoActual,\r\n    row: nextRow,\r\n    position: nextPosition,\r\n  };\r\n}\r\n\r\nfunction fallaste() {\r\n  if (juegoActual.juegoFinalizado) {\r\n    return;\r\n  }\r\n\r\n  if (juegoActual.position === 31 && juegoActual.row === 7) {\r\n    toast.error(`Fallaste, la palabra era ${desencriptarPalabra(juegoActual.dailyWord)}`, {\r\n      position: 'top-center',\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n\r\n    const nuevasJugadas = juegoActual.jugadas + 1;\r\n    const nuevaDistribucion = { ...juegoActual.distribucion };\r\n\r\n    nuevaDistribucion.X += 1;\r\n    juegoActual = {\r\n      ...juegoActual,\r\n      juegoFinalizado: true,\r\n      jugadas: nuevasJugadas,\r\n      distribucion: nuevaDistribucion,\r\n      streak: 0,\r\n    };\r\n  }\r\n}\r\n\r\n// Returns a new state to avoid breaking react rules.\r\nfunction keyPress(e: string, juego: Juego) {\r\n  juegoActual = juego;\r\n\r\n  if (juegoActual.juegoFinalizado) {\r\n    return juegoActual;\r\n  }\r\n\r\n  let square = document.getElementsByClassName('square')[juegoActual.position - 1];\r\n\r\n  if (e === 'Backspace') {\r\n    if (square.textContent === '') {\r\n      movePosition(false);\r\n    }\r\n    square = document.getElementsByClassName('square')[juegoActual.position - 1];\r\n    square.textContent = '';\r\n  } else if (e === 'Enter') {\r\n    const existe = checkWord();\r\n\r\n    if (existe) {\r\n      moveRow();\r\n    }\r\n  } else if (e.length === 1 && square.textContent === '' && /[a-zA-Z\\u00f1\\u00d1]/.test(e)) {\r\n    const span = document.createElement('span');\r\n\r\n    span.textContent = e;\r\n    square.appendChild(span);\r\n    movePosition();\r\n  }\r\n  fallaste();\r\n\r\n  return juegoActual;\r\n}\r\n\r\nexport default keyPress;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}